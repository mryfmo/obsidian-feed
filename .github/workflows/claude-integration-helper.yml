name: Claude Integration Helper

# This workflow provides helper functions for Claude Code Action integration
# It ensures Claude follows the strict phase-based workflow

on:
  workflow_call:
    inputs:
      phase:
        required: true
        type: string
        description: Current workflow phase (FETCH|INV|ANA|PLAN|BUILD|VERIF|REL)
      pr_number:
        required: false
        type: number
        description: PR number for label updates

jobs:
  validate-phase:
    runs-on: ubuntu-latest
    outputs:
      valid: ${{ steps.check.outputs.valid }}
      next_phase: ${{ steps.check.outputs.next_phase }}
    steps:
      - name: Validate Phase Transition
        id: check
        run: |
          CURRENT="${{ inputs.phase }}"
          PHASES="FETCH INV ANA PLAN BUILD VERIF REL"

          # Validate current phase
          if [[ ! " $PHASES " =~ " $CURRENT " ]]; then
            echo "::error::Invalid phase: $CURRENT"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Determine next valid phase
          case $CURRENT in
            FETCH) NEXT="INV" ;;
            INV) NEXT="ANA" ;;
            ANA) NEXT="PLAN" ;;
            PLAN) NEXT="BUILD" ;;
            BUILD) NEXT="VERIF" ;;
            VERIF) NEXT="REL" ;;
            REL) NEXT="COMPLETE" ;;
          esac

          echo "valid=true" >> $GITHUB_OUTPUT
          echo "next_phase=$NEXT" >> $GITHUB_OUTPUT

  update-pr-metadata:
    if: inputs.pr_number
    runs-on: ubuntu-latest
    needs: validate-phase
    steps:
      - name: Update PR Labels and Title
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ inputs.pr_number }};
            const phase = '${{ inputs.phase }}';
            const phases = ['FETCH', 'INV', 'ANA', 'PLAN', 'BUILD', 'VERIF', 'REL'];

            // Update PR title if needed
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });

            const titleRegex = /^(FETCH|INV|ANA|PLAN|BUILD|VERIF|REL):\s*/;
            if (!titleRegex.test(pr.title)) {
              const newTitle = `${phase}: ${pr.title}`;
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
                title: newTitle
              });
            }

            // Update labels
            const currentLabels = pr.labels.map(l => l.name);
            const phaseLabels = currentLabels.filter(l => phases.includes(l));

            // Remove old phase labels
            for (const label of phaseLabels) {
              if (label !== phase) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr_number,
                  name: label
                });
              }
            }

            // Add current phase label
            if (!currentLabels.includes(phase)) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                labels: [phase]
              });
            }

  check-artifacts:
    runs-on: ubuntu-latest
    needs: validate-phase
    steps:
      - uses: actions/checkout@v4

      - name: Check Required Artifacts
        run: |
          PHASE="${{ inputs.phase }}"
          MISSING=""

          case $PHASE in
            INV)
              # Check for reproduction test or QA doc
              if ! ls docs/qa/*-investigation.md 2>/dev/null | grep -q .; then
                MISSING="Investigation document in docs/qa/"
              fi
              ;;
            ANA)
              # Check for analysis document
              if ! ls docs/qa/*-analysis.md 2>/dev/null | grep -q .; then
                MISSING="Analysis document in docs/qa/"
              fi
              ;;
            PLAN)
              # Check for RFC
              if ! ls docs/rfcs/*.md 2>/dev/null | grep -q .; then
                MISSING="RFC document in docs/rfcs/"
              fi
              ;;
            VERIF)
              # Check for test results
              if ! grep -q "State-Transition:.*VERIF" CHANGELOG.md 2>/dev/null; then
                MISSING="CHANGELOG.md update with verification results"
              fi
              ;;
          esac

          if [[ -n "$MISSING" ]]; then
            echo "::warning::Missing required artifact for $PHASE phase: $MISSING"
          fi
