name: Claude Code Integration (Unified)

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  claude-integration:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude'))) ||
      (github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        run: |
          # Detect integration mode from PR/Issue labels or content
          MODE="hybrid"  # Default to hybrid mode
          
          if [[ "${{ github.event_name }}" == "pull_request"* ]]; then
            LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
            BODY="${{ github.event.pull_request.body }}"
          else
            LABELS="${{ join(github.event.issue.labels.*.name, ',') }}"
            BODY="${{ github.event.issue.body || '' }}"
          fi
          
          # Check for MCP mode indicators
          if [[ "$LABELS" == *"mcp-only"* ]] || [[ "$BODY" == *"@claude-mcp"* ]]; then
            MODE="mcp"
          elif [[ "$LABELS" == *"shell-only"* ]]; then
            MODE="shell"
          fi
          
          echo "mode=$MODE" >> $GITHUB_ENV
          echo "Integration mode: $MODE"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup Python (for MCP servers)
        if: env.mode != 'shell'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install UV (for Python MCP servers)
        if: env.mode != 'shell'
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create Hybrid Configuration
        run: |
          mkdir -p .github/claude
          
          # Create MCP configuration if not shell-only
          if [[ "${{ env.mode }}" != "shell" ]]; then
            cat > .github/claude/mcp-config.json << EOF
          {
            "mcpServers": {
              "filesystem": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-filesystem", "$GITHUB_WORKSPACE"]
              },
              "github": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-github"],
                "env": {
                  "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                }
              },
              "memory": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-memory"]
              },
              "sequential-thinking": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"]
              },
              "context7": {
                "command": "npx",
                "args": ["-y", "@upstash/context7-mcp"],
                "env": {
                  "DEFAULT_MINIMUM_TOKENS": "10000"
                }
              }
            }
          }
          EOF
          fi
          
          # Create tools inventory
          cat > .github/claude/tools.json << EOF
          {
            "shell_scripts": {
              "turn_guard": "tools/turn_guard.sh - Validates Claude output format and guards",
              "fetch_doc": "tools/fetch_doc.sh - Downloads documents (with MCP fallback)",
              "list_guards": "tools/list_guards.sh - Lists all validation guards",
              "gen_wbs": "tools/gen_wbs.py - Generates work breakdown structure",
              "validate_stp": "tools/validate-stp-markers.sh - Validates STP compliance"
            },
            "mcp_integration": {
              "bridge": ".mcp/bridge.ts - Bridge between shell scripts and MCP",
              "validator": ".mcp/validator.ts - 14 guards implemented",
              "fetcher": ".mcp/fetcher.ts - Enhanced document fetching with Context7",
              "workflow": ".mcp/workflow.ts - 7-phase workflow management"
            },
            "mode": "${{ env.mode }}",
            "capabilities": {
              "shell": ["validation", "fetching", "workflow"],
              "mcp": ["enhanced-validation", "context7", "github-integration"],
              "hybrid": ["all-features", "backward-compatible", "progressive-enhancement"]
            }
          }
          EOF

      - name: Detect Phase and Context
        id: phase
        run: |
          # Extract phase from PR/Issue
          if [[ "${{ github.event_name }}" == "pull_request"* ]]; then
            TITLE="${{ github.event.pull_request.title }}"
            NUMBER="${{ github.event.pull_request.number }}"
          else
            TITLE="${{ github.event.issue.title || '' }}"
            NUMBER="${{ github.event.issue.number || '0' }}"
          fi
          
          # Extract phase
          PHASE=$(echo "$TITLE" | grep -oE '^(FETCH|INV|ANA|PLAN|BUILD|VERIF|REL):' | sed 's/://' || echo "INV")
          echo "phase=$PHASE" >> $GITHUB_OUTPUT
          echo "number=$NUMBER" >> $GITHUB_OUTPUT
          
          # Determine next phase
          case $PHASE in
            FETCH) NEXT="INV" ;;
            INV) NEXT="ANA" ;;
            ANA) NEXT="PLAN" ;;
            PLAN) NEXT="BUILD" ;;
            BUILD) NEXT="VERIF" ;;
            VERIF) NEXT="REL" ;;
            REL) NEXT="COMPLETE" ;;
            *) NEXT="INV" ;;
          esac
          echo "next_phase=$NEXT" >> $GITHUB_OUTPUT
          
          # Get phase-specific constraints
          case $PHASE in
            FETCH)
              echo "phase_constraints=Network access allowed via tools/fetch_doc.sh or MCP fetch server" >> $GITHUB_OUTPUT
              ;;
            BUILD)
              echo "phase_constraints=Max 1000 LOC, 10 files per patch. Use MCP for validation." >> $GITHUB_OUTPUT
              ;;
            PLAN)
              echo "phase_constraints=Create RFC in docs/rfcs/, requires approval. Use gen_wbs.py for WBS." >> $GITHUB_OUTPUT
              ;;
            *)
              echo "phase_constraints=Follow standard phase requirements. Validate with turn_guard.sh." >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Prepare Documentation Context
        id: context
        run: |
          # Create comprehensive context
          cat > claude-context.md << 'EOF'
          # Context for Claude Code Integration
          
          ## Integration Mode: ${{ env.mode }}
          
          ### Available Resources
          EOF
          
          # Add CLAUDE.md
          echo "#### CLAUDE.md" >> claude-context.md
          echo '```markdown' >> claude-context.md
          cat CLAUDE.md >> claude-context.md
          echo '```' >> claude-context.md
          echo "" >> claude-context.md
          
          # Add MCP documentation if relevant
          if [[ "${{ env.mode }}" != "shell" ]] && [[ -f ".mcp/README.md" ]]; then
            echo "#### MCP Integration (.mcp/README.md)" >> claude-context.md
            echo '```markdown' >> claude-context.md
            head -100 .mcp/README.md >> claude-context.md
            echo '```' >> claude-context.md
            echo "" >> claude-context.md
          fi
          
          # Add workflow documentation
          if [ -f "docs/agents/02_claude-code.md" ]; then
            echo "#### Workflow Documentation" >> claude-context.md
            echo '```markdown' >> claude-context.md
            head -50 docs/agents/02_claude-code.md >> claude-context.md
            echo '```' >> claude-context.md
            echo "" >> claude-context.md
          fi
          
          # List available tools based on mode
          echo "### Available Tools (${{ env.mode }} mode)" >> claude-context.md
          echo '```json' >> claude-context.md
          cat .github/claude/tools.json >> claude-context.md
          echo '```' >> claude-context.md
          
          # Save context
          CONTEXT_SIZE=$(wc -c < claude-context.md)
          echo "context_size=$CONTEXT_SIZE" >> $GITHUB_OUTPUT

      - name: Create Integration Instructions
        id: instructions
        run: |
          cat > instructions.md << 'EOF'
          # Claude Code Instructions - ${{ env.mode }} Mode
          
          ## Current Status
          - **Phase**: ${{ steps.phase.outputs.phase }}
          - **Next Phase**: ${{ steps.phase.outputs.next_phase }}
          - **Integration Mode**: ${{ env.mode }}
          - **Issue/PR**: #${{ steps.phase.outputs.number }}
          
          ## Integration Approach
          EOF
          
          case "${{ env.mode }}" in
            "shell")
              cat >> instructions.md << 'EOF'
          ### Shell-Only Mode
          Use traditional shell scripts exclusively:
          - `tools/turn_guard.sh` for validation
          - `tools/fetch_doc.sh` for document fetching
          - `tools/list_guards.sh` to see all guards
          - `tools/gen_wbs.py` for work breakdown
          - No MCP servers available
          EOF
              ;;
            "mcp")
              cat >> instructions.md << 'EOF'
          ### MCP-Only Mode
          Use MCP servers exclusively:
          - **filesystem**: All file operations
          - **github**: Issues, PRs, labels
          - **memory**: State persistence
          - **sequential-thinking**: Complex analysis
          - **context7**: Library documentation
          - Do NOT use shell scripts directly
          EOF
              ;;
            "hybrid")
              cat >> instructions.md << 'EOF'
          ### Hybrid Mode (True Integration)
          Leverage both shell scripts and MCP servers:
          - Shell scripts have MCP fallback via `.mcp/bridge.ts`
          - Use `tools/turn_guard.sh` - it will use MCP if available
          - Use `tools/fetch_doc.sh` - it will use Context7 if available
          - Direct MCP usage for advanced features
          - Best of both worlds approach
          
          **True Integration Philosophy (真の統合)**:
          統合 = カスタムシェルスクリプト + カスタムMCPサーバー + 公式MCPサーバーを協調させて、より良いシステムを作る
          EOF
              ;;
          esac
          
          cat >> instructions.md << 'EOF'
          
          ## Required Response Format
          <think>
          [Analysis of the request and context, 20-700 words]
          </think>
          
          <act>
          ${{ steps.phase.outputs.phase }}: [Specific task description]
          [Actual work following phase constraints]
          </act>
          
          <verify>
          [Verification steps and results]
          </verify>
          
          <next>
          [Next steps or completion status]
          State-Transition: ${{ steps.phase.outputs.phase }}→${{ steps.phase.outputs.next_phase }}
          </next>
          
          ## Phase Constraints
          ${{ steps.phase.outputs.phase_constraints }}
          
          ## Validation
          All outputs must pass validation. In hybrid/shell mode, use:
          ```bash
          tools/turn_guard.sh output.md
          ```
          
          In MCP mode, validation is automatic via the integration layer.
          EOF
          
          # Save instructions
          echo "instructions<<EOF" >> $GITHUB_OUTPUT
          cat instructions.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Run Claude Code Action
        uses: mryfmo/claude-code-action@main
        with:
          instructions: ${{ steps.instructions.outputs.instructions }}
          context_file: claude-context.md
          mcp_config: ${{ env.mode != 'shell' && '.github/claude/mcp-config.json' || '' }}
          tools_config: .github/claude/tools.json
        env:
          CLAUDE_ACCESS_TOKEN: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          CLAUDE_REFRESH_TOKEN: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          CLAUDE_EXPIRES_AT: ${{ secrets.CLAUDE_EXPIRES_AT }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INTEGRATION_MODE: ${{ env.mode }}

      - name: Validate Output
        if: success()
        run: |
          echo "Validating Claude output based on integration mode: ${{ env.mode }}"
          
          # In hybrid/shell mode, use turn_guard.sh
          if [[ "${{ env.mode }}" != "mcp" ]]; then
            if [ -f "claude-output.md" ]; then
              chmod +x tools/turn_guard.sh
              tools/turn_guard.sh claude-output.md || {
                echo "::error::Claude output failed validation"
                exit 1
              }
            fi
          else
            echo "MCP mode validation via integration layer"
          fi

      - name: Update Phase Labels
        if: github.event_name == 'pull_request' || contains(github.event_name, 'pull_request_')
        uses: actions/github-script@v7
        with:
          script: |
            const phase = '${{ steps.phase.outputs.phase }}';
            const mode = '${{ env.mode }}';
            const validPhases = ['FETCH', 'INV', 'ANA', 'PLAN', 'BUILD', 'VERIF', 'REL'];
            
            if (!validPhases.includes(phase)) {
              console.log('Invalid phase detected, skipping label update');
              return;
            }
            
            const issue_number = context.issue.number;
            
            try {
              // Get current labels
              const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number
              });
              
              const currentLabelNames = currentLabels.map(l => l.name);
              
              // Remove old phase labels
              for (const oldPhase of validPhases) {
                if (oldPhase !== phase && currentLabelNames.includes(oldPhase)) {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue_number,
                    name: oldPhase
                  });
                }
              }
              
              // Add current phase label
              if (!currentLabelNames.includes(phase)) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue_number,
                  labels: [phase]
                });
              }
              
              // Add mode label if not present
              const modeLabel = `mode:${mode}`;
              if (!currentLabelNames.includes(modeLabel)) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue_number,
                  labels: [modeLabel]
                });
              }
            } catch (error) {
              console.error('Error updating labels:', error.message);
            }

      - name: Post Summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const phase = '${{ steps.phase.outputs.phase }}';
            const mode = '${{ env.mode }}';
            const contextSize = '${{ steps.context.outputs.context_size }}';
            
            let modeDescription;
            switch(mode) {
              case 'shell':
                modeDescription = 'Traditional shell scripts only';
                break;
              case 'mcp':
                modeDescription = 'Official MCP servers only';
                break;
              case 'hybrid':
                modeDescription = 'True Integration (Shell + MCP)';
                break;
            }
            
            const comment = `## Claude Code Integration Summary
            
            - **Current Phase**: ${phase}
            - **Integration Mode**: ${mode} - ${modeDescription}
            - **Context Size**: ${contextSize} bytes
            - **Documentation**: CLAUDE.md, workflow docs${mode !== 'shell' ? ', MCP integration' : ''}
            
            ### Available Tools
            ${mode === 'shell' || mode === 'hybrid' ? '- Shell scripts: turn_guard.sh, fetch_doc.sh, etc.' : ''}
            ${mode === 'mcp' || mode === 'hybrid' ? '- MCP servers: filesystem, github, memory, sequential-thinking, context7' : ''}
            ${mode === 'hybrid' ? '- Bridge: Automatic MCP fallback for shell scripts' : ''}
            
            Claude has been configured for ${mode} mode operation.`;
            
            if (context.issue && context.issue.number) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }