name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude'))) ||
      (github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Current Phase
        id: phase
        run: |
          # Get title from PR or Issue
          if [[ "${{ github.event_name }}" == "pull_request"* ]]; then
            TITLE="${{ github.event.pull_request.title }}"
          else
            TITLE="${{ github.event.issue.title || '' }}"
          fi
          
          # Extract phase label from title
          PHASE=$(echo "$TITLE" | grep -oE '^(FETCH|INV|ANA|PLAN|BUILD|VERIF|REL):' | sed 's/://' || echo "")
          
          # Default to INV if no phase found
          PHASE=${PHASE:-INV}
          echo "phase=$PHASE" >> $GITHUB_OUTPUT
          echo "Current phase: $PHASE"
          
          # Determine next phase
          case $PHASE in
            FETCH) NEXT="INV" ;;
            INV) NEXT="ANA" ;;
            ANA) NEXT="PLAN" ;;
            PLAN) NEXT="BUILD" ;;
            BUILD) NEXT="VERIF" ;;
            VERIF) NEXT="REL" ;;
            REL) NEXT="COMPLETE" ;;
            *) NEXT="INV" ;;
          esac
          echo "next_phase=$NEXT" >> $GITHUB_OUTPUT

      - name: Run Claude Code Action
        uses: mryfmo/claude-code-action@main
        env:
          CLAUDE_ACCESS_TOKEN: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          CLAUDE_REFRESH_TOKEN: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          CLAUDE_EXPIRES_AT: ${{ secrets.CLAUDE_EXPIRES_AT }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CURRENT_PHASE: ${{ steps.phase.outputs.phase }}
          NEXT_PHASE: ${{ steps.phase.outputs.next_phase }}

      - name: Update Phase Labels
        if: github.event_name == 'pull_request' || contains(github.event_name, 'pull_request_')
        uses: actions/github-script@v7
        with:
          script: |
            const phase = '${{ steps.phase.outputs.phase }}';
            const validPhases = ['FETCH', 'INV', 'ANA', 'PLAN', 'BUILD', 'VERIF', 'REL'];
            
            if (!validPhases.includes(phase)) {
              console.log('Invalid phase detected, skipping label update');
              return;
            }
            
            const issue_number = context.issue.number;
            
            try {
              // Get current labels
              const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number
              });
              
              const currentLabelNames = currentLabels.map(l => l.name);
              
              // Remove old phase labels
              for (const oldPhase of validPhases) {
                if (oldPhase !== phase && currentLabelNames.includes(oldPhase)) {
                  try {
                    await github.rest.issues.removeLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue_number,
                      name: oldPhase
                    });
                  } catch (e) {
                    console.log(`Could not remove label ${oldPhase}`);
                  }
                }
              }
              
              // Add current phase label if not present
              if (!currentLabelNames.includes(phase)) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue_number,
                  labels: [phase]
                });
                console.log(`Added phase label: ${phase}`);
              }
              
              // Update PR title if needed
              if (context.eventName === 'pull_request') {
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: issue_number
                });
                
                const phasePrefix = `${phase}: `;
                if (!pr.title.startsWith(phasePrefix)) {
                  // Remove any existing phase prefix
                  let newTitle = pr.title.replace(/^(FETCH|INV|ANA|PLAN|BUILD|VERIF|REL):\s*/, '');
                  newTitle = phasePrefix + newTitle;
                  
                  await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: issue_number,
                    title: newTitle
                  });
                  console.log(`Updated PR title to: ${newTitle}`);
                }
              }
            } catch (error) {
              console.error('Error updating labels/title:', error.message);
            }